싱글턴 패턴
특정 클래스의 인스턴스를 하나만 만들어 여러 곳에서 사용하고자 할때 쓰는 패턴
인스턴스가 오직 하나만 생성되는 것을 보장하고 어디에서든 이 인스턴스에 접근할 수 있도록 하는 디자인 패턴

1. static 멤버 변수를 사용한 인스턴스 생성
클래스 로딩 시점에 인스턴스를 생성하여 get하는 시점에는 항상 동일한 인스턴스가 리턴된다.
인스턴스가 여러번 생성되는 것을 방지하기 위해 null 체크를 따로 할 필요가 없다.
객체 초기화 시에 다른 클래스의 객체가 필요하다면 적합하지 않음.

2. get 메소드에 syncronized 한정자를 붙이는 방법
객체를 얻어올 때 단 하나의 스레드만이 접근하도록 한다.

3. 인스턴스 생성 없이 정적 클래스로 만드는 방법
static 메소드만으로 이루어진 정적 클래스를 만들면 인스턴스 생성으로 인한 리스크가 발생할 수 없다.
객체 생성 및 바인딩 시간이 없으므로 성능면에서는 더 우수하다.
인터페이스를 상속하여 정적 클래스를 만들수는 없다는 단점도 있다.
정적 클래스로 만들면 유닛테스트가 어렵다.

유닛테스트 방법
1. 싱글턴 클래스의 특정 메소드의 유닛테스트를 수행하고자 한다면..
해당 메소드를 제공하는 상위 인터페이스를 생성하여 캡슐화한다.
그리고 이 인터페이스를 구현하는 테스트용 클래스를 생성하고, 메소드 구현부에는 테스트 코드를 작성한다.
이후 테스트용 클래스를 사용하여 유닛테스트 코드를 작성하면 된다.

2. 정적 setter 메소드를 사용하는 방법
싱글턴 클래스의 객체를 생성하는 팩토리 클래스에 정적 setter 메소드를 만들어
객체를 바꿔치기하는 방법이 있다.

