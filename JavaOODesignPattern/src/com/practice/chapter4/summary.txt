4.1 디자인 패턴의 이해
디자인 패턴?
소프트웨어를 설계할 때 특정 맥락에서 자주 발생하는 문제들을 해결할 때 사용 가능한 효율적인 해결책

디자인 패턴의 구성요소

콘텍스트 : 문제가 발생할 수 있는 상황
문제 : 패턴이 적용되어 해결될 필요가 있는 디자인 이슈
해결 : 문제를 해결하도록 설계를 구성하는 요소들과 그 요소들 사이의 관계, 책임, 협력 관계를 기술한다.


4.2 GoF 디자인 패턴

생성 패턴
객체 생성에 관련된 패턴.
객체 생성과 조합을 캡슐화하여 특정 객체가 생성되거나 변경되어도 프로그램의 구조에 크게 영향을 받지 않도록 유연성을 제공
e.g. 추상 팩토리, 빌더, 팩토리 메소드, 프로토타입, 싱글턴

구조 패턴
클래스나 객체를 조합해 더 큰 구조를 만드는 패턴.
서로 다른 인터페이스를 지닌 2개의 객체를 묶어 단일 인터페이스를 제공하거나 객체들을 서로 묶어 새로운 기능을 제공하는 패턴.
e.g. 어댑터, 브릿지, 컴포지트, 데코레이터, 퍼사드, 플라이웨이트, 프록시

행위 패턴
객체나 클래스 사이의 알고리즘이나 책임 분배에 관련된 패턴.
한 객체가 혼자 수행할 수 없는 작업을 여러 개의 객체로 어떻게 분배하는지, 또 객체 사이의 결합도를 최소화하는 것에 중점을 둔다.
e.g. 책임 연쇄, 커맨드, 인터프리터, 이터레이터, 미디에이터, 메멘토, 옵저버, 스테이트, 스트래티지, 템플릿 메소드, 비지터


4.3 UML과 디자인 패턴

컬레보레이션
UML 2.0에서 디자인 패턴을 표현하는 도구
객체들이 특정 상황에서 수행하는 역할의 상호작용을 표한한다.

컬레보레이션 어커런스
구체적인 상황에서의 컬레보레이션 작용을 표현한다.

시퀀스 다이어그램
객체들의 상호작용을 나타냄

객체 박스 : 최상단에 위치하며, 객체이름:클래스 이름 형태로 표현
생명선 : 객체 아래로 뻗어있는 점선
활성구간 : 실제 객체가 연산을 수행하는 구간
채워진 화살표 : 동기 메시지
비워진 화살표 : 비동기 메시지
<<create>>, <<destroy>> : 객체 생성, 소멸 메시지
가드 : 메시지가 송신되는데 필요한 조건
점선 화살표 : 응답 메시지. 생략해도 됨

다이어그램 프레임 : 다이어그램의 경계를 표시하며, 왼쪽 상단 모서리에 타입과 이름을 넣을 수 있다.
타입 e.g. sd : 시퀀스 다이어그램, uc : 유스케이스 다이어그램, act : 액티비티 다이어그램

ref 키워드 : 다른 다이어그램을 참조하도록 한다.
alt 키워드 : 상호작용을 조건에 따라 선택적으로 수행할 수 있게 한다. 조건은 프레임의 윗부분에 표시한다.
loop 키워드 : 반복적인 상호작용을 나타냄. e.g. loop[ok<>true] : ok가 아닐 경우 반복
opt 키워드 : 특정 조건에서만 상호작용을 선택적으로 수행
par 키워드 : 동시에 실행되는 상호작용을 수행
break 키워드 : 특정 상호작용 그룹을 빠져나갈 때 사용한다.

시스템을 모델링할때 클래스 다이어그램과 시퀀스 다이어그램은 서로 정합이 이루어져야 한다.
시퀀스 다이어그램으로는 두 클래스 간의 관계가 연관/의존 관계 중 어떤 것인지 알 수 없다.

