1. 추상화
사용자의 목적에 맞게 어떤 집단의 공통적인 특성을 추려내어 집합화 하는 것을 의미한다.

2. 캡슐화
응집도 - 클래스나 모듈 안의 요소들이 밀접하게 관련되어 있는 정도
결합도 - 어떤 기능을 실행하는 데 다른 클래스나 모듈들에 얼마나 의존적인지 나타내는 정도

3. 일반화 관계
외부 세계에 자식 클래스를 캡슐화하는 개념으로 볼 수 있다.
일반화 관계를 통해 클래스 자체를 캡슐화하는 것이다.
"is a kind of" 관계가 성립하지 않는다면 불필요한 속성/연산을 물려받게 된다.

집합론적인 관점에서 본다면 일반화 관계를 만들기 쉬워진다.
상호 배타적인 여러 특성을 모델링할 때 적용 가능..

특수화 - 일반화의 반대말로, 부모 클래스에서 자식 클래스를 추출하는 과정
다중 분류 - 한 인스턴스가 동시에 여러 클래스에 속할 수 있는 것

4. 다형성
서로 다른 클래스의 객체가 같은 메시지를 받았을 때 각자의 방식으로 동작하는 능력

5. 피터 코드의 상속 규칙
1) 자식 클래스와 부모 클래스 사이는 역할 수행 관계가 아니어야 한다.
: 사람 - 운전자, 사람 - 회사원 등 어떤 순간에 수행하는 역할이 상속 관계로 표현되어서는 안된다.
동물 - 토끼, 동물 - 돼지 등으로 역할이 아닌 존재(?)로 표현되는 것이 좋다.

2) 한 클래스의 인스턴스는 다른 서브 클래스의 객체로 변환할 필요가 절대 없어야 한다.
: 토끼가 돼지가 될 수 없듯이 서브 클래스 간의 관계도 서로 변환이 불가능한 정도로 표현되어야 한다.

3) 자식 클래스가 부모 클래스의 책임을 무시하거나 재정의하지 않고 확장만 수행해야 한다.
: 부모-자식 클래스 간의 모델링이 어떻게 되었냐에 따라 나올 수 있는 문제이다.
이 규칙이 안 지켜지면 클래스가 커질수록 유지보수가 힘들어 질 수 있다.
무시된 책임으로 인해 공통의 부모를 가진 자식 클래스들 간에도 공통된 동작으로 기대되는 결과가 달라질 수 있으므로
가독성/이해도가 떨어질 수 있고 이는 버그를 만들어 낼 수 있다.

4) 자식 클래스가 단지 일부 기능을 재사용할 목적으로 유틸리티 역할을 수행하는 클래스를 상속하지 않아야 한다.

5) 자식 클래스가 역할, 트랜잭션, 디바이스 등을 특수화해야 한다.

Practice
1. 2
2. 4
3. 3
4.