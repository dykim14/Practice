3.1 단일 책임 원칙
SRP (Single Responsibility Principle)
객체는 단 하나의 책임만 가져야 한다.
책임 = 해야 하는 것을 (가장) 잘 할 수 있는 것

특정 작업을 여러 클래스가 할 수 있다고 가정할 때, 그 일을 가장 잘 할 수 있는 클래스가 책임을 갖는 것이 좋다.

책임이 많아 질수록 클래스 내부에서 서로 다른 역할을 수행하는 코드끼리 강하게 결합될 가능성이 높아진다.

회귀 테스트 : 시스템에 변경이 발생할 때 해당 변경 사항이 기존 기능에 영향을 주는지 평가하는 테스트

회귀 테스트 비용을 줄이려면 변경 시 영향받는 부분이 적도록 설계하는 것이 필요하다.


산탄총 수술 : 하나의 책임이 여러 클래스로 분산되어 있어 이를 단일 책임 원칙에 맞춰 설계 변경을 하는 것.
경우에 따라 비용이 커질 수 있다..특히 횡단 관심에 속하는 기능에 대해서는 수정도 어렵고 위험하다.

횡단 관심 문제는 AOP(관심지향 프로그래밍)으로 해결 가능하다고 한다..

응집도는 높게, 결합도는 낮게하면 재사용성은 높아진다.


